{"version":3,"names":["upload","_ref","_asyncToGenerator2","_regeneratorRuntime2","mark","_callee","filePath","fileExt","contentType","uploadPath","uploadProgress","applicationInfo","fileUrls","uploadUrlInfo","_iterator","_step","uploadUrl","wrap","_callee$","_context","prev","next","common_storage","getApplicationInfo","uploadType","api_common","common","uploadToServer","sent","abrupt","getUploadUrls","extension","path","urls","length","_createForOfIteratorHelper2","s","n","done","value","t0","uploadCOS","headers","url","common_vendor","index","showToast","title","icon","t1","e","f","finish","stop","_x","_x2","_x3","_x4","_x5","apply","arguments"],"sources":["upload.ts"],"sourcesContent":["import { getApplicationInfo } from '@/common/storage';\nimport {common} from '@/api/index'\n\n/**\n * 上传文件\n * @param options\n */\nexport default async (filePath: string, fileExt: string, contentType: string, uploadPath: string, uploadProgress?: (progress: number) => void) => {\n    const applicationInfo = getApplicationInfo();\n\tapplicationInfo.uploadType = 'tencent_cloud_cos'\n\n\tif (applicationInfo.uploadType === 'system') {\n\t\t// 上传到server\n\t\tconst fileUrls = await common.uploadToServer(filePath, uploadProgress);\n\t\treturn fileUrls[0];\n\t} else {\n\t\t// 上传到云服务\n\t\t// 获取上传url\n\t\tconst uploadUrlInfo = await common.getUploadUrls([{\n\t\t\textension: fileExt,\n\t\t\tpath: uploadPath\n\t\t}]);\n\n\t\t// 上传失败\n\t\tif (!uploadUrlInfo || uploadUrlInfo.urls.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const uploadUrl of uploadUrlInfo.urls) {\n\t\t\tswitch (applicationInfo.uploadType) {\n\t\t\t\tcase 'tencent_cloud_cos':\n\t\t\t\t\tawait common.uploadCOS(filePath, contentType, uploadUrl.uploadUrl, uploadUrlInfo.headers, uploadProgress);\n\n\t\t\t\t\treturn uploadUrl.url;\n\t\t\t\tdefault:\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t    title: '暂不支持当前上传类型',\n\t\t\t\t\t    icon: 'none'\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n"],"mappings":";;;;;;;;;AAOA,IAAeA,MAAA;EAAA,IAAAC,IAAA,GAAAC,kBAAA,eAAAC,oBAAA,GAAAC,IAAA,UAAAC,QAAOC,QAAA,EAAkBC,OAAA,EAAiBC,WAAA,EAAqBC,UAAA,EAAoBC,cAAA;IAAA,IAAAC,eAAA,EAAAC,QAAA,EAAAC,aAAA,EAAAC,SAAA,EAAAC,KAAA,EAAAC,SAAA;IAAA,OAAAb,oBAAA,GAAAc,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UACxFV,eAAA,GAAkBW,cAAA,CAAAC,kBAAA;UAC3BZ,eAAA,CAAgBa,UAAA,GAAa;UAAA,MAEzBb,eAAA,CAAgBa,UAAA,KAAe;YAAAL,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAAF,QAAA,CAAAE,IAAA;UAAA,OAEXI,UAAA,CAAOC,MAAA,CAAAC,cAAA,CAAerB,QAAA,EAAUI,cAAc;QAAA;UAA/DE,QAAA,GAAAO,QAAA,CAAAS,IAAA;UAAA,OAAAT,QAAA,CAAAU,MAAA,WACCjB,QAAA,CAAS,CAAC;QAAA;UAAAO,QAAA,CAAAE,IAAA;UAAA,OAIWI,UAAA,CAAAC,MAAA,CAAOI,aAAA,CAAc,CAAC;YACjDC,SAAA,EAAWxB,OAAA;YACXyB,IAAA,EAAMvB;UACN,EAAC;QAAA;UAHII,aAAA,GAAAM,QAAA,CAAAS,IAAA;UAAA,MAMF,CAACf,aAAA,IAAiBA,aAAA,CAAcoB,IAAA,CAAKC,MAAA,KAAW;YAAAf,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,QAAA,CAAAU,MAAA;QAAA;UAAAf,SAAA,GAAAqB,2BAAA,CAI5BtB,aAAA,CAAcoB,IAAA;UAAAd,QAAA,CAAAC,IAAA;UAAAN,SAAA,CAAAsB,CAAA;QAAA;UAAA,KAAArB,KAAA,GAAAD,SAAA,CAAAuB,CAAA,IAAAC,IAAA;YAAAnB,QAAA,CAAAE,IAAA;YAAA;UAAA;UAA3BL,SAAA,GAAAD,KAAA,CAAAwB,KAAA;UAAApB,QAAA,CAAAqB,EAAA,GACF7B,eAAA,CAAgBa,UAAA;UAAAL,QAAA,CAAAE,IAAA,GAAAF,QAAA,CAAAqB,EAAA,KAClB;UAAA;QAAA;UAAArB,QAAA,CAAAE,IAAA;UAAA,OACEI,UAAA,CAAAC,MAAA,CAAOe,SAAA,CAAUnC,QAAA,EAAUE,WAAA,EAAaQ,SAAA,CAAUA,SAAA,EAAWH,aAAA,CAAc6B,OAAA,EAAShC,cAAc;QAAA;UAAA,OAAAS,QAAA,CAAAU,MAAA,WAEjGb,SAAA,CAAU2B,GAAA;QAAA;UAEjBC,aAAA,CAAAC,KAAA,CAAIC,SAAA,CAAU;YACVC,KAAA,EAAO;YACPC,IAAA,EAAM;UAAA,CACT;UAAA,OAAA7B,QAAA,CAAAU,MAAA;QAAA;UAAAV,QAAA,CAAAE,IAAA;UAAA;QAAA;UAAAF,QAAA,CAAAE,IAAA;UAAA;QAAA;UAAAF,QAAA,CAAAC,IAAA;UAAAD,QAAA,CAAA8B,EAAA,GAAA9B,QAAA;UAAAL,SAAA,CAAAoC,CAAA,CAAA/B,QAAA,CAAA8B,EAAA;QAAA;UAAA9B,QAAA,CAAAC,IAAA;UAAAN,SAAA,CAAAqC,CAAA;UAAA,OAAAhC,QAAA,CAAAiC,MAAA;QAAA;QAAA;UAAA,OAAAjC,QAAA,CAAAkC,IAAA;MAAA;IAAA,GAAAhD,OAAA;EAAA,CAKN;EAAA,gBApCeL,OAAAsD,EAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA;IAAA,OAAAzD,IAAA,CAAA0D,KAAA,OAAAC,SAAA;EAAA;AAAA,GAoCf","ignoreList":[]}